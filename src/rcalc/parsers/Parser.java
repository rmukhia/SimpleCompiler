
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat May 05 03:16:35 ICT 2018
//----------------------------------------------------

package rcalc.parsers;

import rcalc.lexer.Token;
import rcalc.parsers.terminals.*;
import rcalc.parsers.nonterminals.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat May 05 03:16:35 ICT 2018
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\041\000\002\002\004\000\002\002\003\000\002\003" +
    "\005\000\002\004\004\000\002\004\003\000\002\005\004" +
    "\000\002\005\004\000\002\005\004\000\002\005\004\000" +
    "\002\005\004\000\002\006\005\000\002\007\006\000\002" +
    "\010\005\000\002\011\005\000\002\011\006\000\002\012" +
    "\005\000\002\013\005\000\002\013\003\000\002\014\005" +
    "\000\002\014\005\000\002\014\003\000\002\015\005\000" +
    "\002\015\005\000\002\015\003\000\002\016\005\000\002" +
    "\016\003\000\002\017\004\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\020\005\000\002\021\003" +
    "\000\002\022\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\073\000\012\005\023\011\013\013\021\014\010\001" +
    "\002\000\004\025\075\001\002\000\024\004\uffed\005\uffed" +
    "\006\044\007\043\012\uffed\016\uffed\022\uffed\023\uffed\024" +
    "\uffed\001\002\000\004\025\074\001\002\000\016\002\ufffd" +
    "\005\ufffd\011\ufffd\013\ufffd\014\ufffd\020\ufffd\001\002\000" +
    "\032\004\uffe1\005\uffe1\006\uffe1\007\uffe1\010\uffe1\012\uffe1" +
    "\016\uffe1\021\uffe1\022\uffe1\023\uffe1\024\uffe1\025\uffe1\001" +
    "\002\000\026\004\uffe6\005\uffe6\006\uffe6\007\uffe6\010\uffe6" +
    "\012\uffe6\016\uffe6\022\uffe6\023\uffe6\024\uffe6\001\002\000" +
    "\006\023\070\025\071\001\002\000\012\005\023\011\013" +
    "\013\021\014\010\001\002\000\026\004\uffe4\005\uffe4\006" +
    "\uffe4\007\uffe4\010\uffe4\016\uffe4\021\063\022\uffe4\023\uffe4" +
    "\024\uffe4\001\002\000\012\016\050\022\052\023\051\024" +
    "\053\001\002\000\026\004\uffe5\005\uffe5\006\uffe5\007\uffe5" +
    "\010\uffe5\012\uffe5\016\uffe5\022\uffe5\023\uffe5\024\uffe5\001" +
    "\002\000\016\004\040\005\041\016\ufff0\022\ufff0\023\ufff0" +
    "\024\ufff0\001\002\000\004\025\037\001\002\000\030\004" +
    "\uffe2\005\uffe2\006\uffe2\007\uffe2\010\uffe2\012\uffe2\016\uffe2" +
    "\022\uffe2\023\uffe2\024\uffe2\025\uffe2\001\002\000\026\004" +
    "\uffe8\005\uffe8\006\uffe8\007\uffe8\010\uffe8\012\uffe8\016\uffe8" +
    "\022\uffe8\023\uffe8\024\uffe8\001\002\000\012\005\023\011" +
    "\013\013\021\014\010\001\002\000\004\025\035\001\002" +
    "\000\004\002\034\001\002\000\014\002\000\005\023\011" +
    "\013\013\021\014\010\001\002\000\026\004\uffea\005\uffea" +
    "\006\uffea\007\uffea\010\030\012\uffea\016\uffea\022\uffea\023" +
    "\uffea\024\uffea\001\002\000\012\005\023\011\013\013\021" +
    "\014\010\001\002\000\026\004\uffe4\005\uffe4\006\uffe4\007" +
    "\uffe4\010\uffe4\012\uffe4\016\uffe4\022\uffe4\023\uffe4\024\uffe4" +
    "\001\002\000\026\004\uffe9\005\uffe9\006\uffe9\007\uffe9\010" +
    "\uffe9\012\uffe9\016\uffe9\022\uffe9\023\uffe9\024\uffe9\001\002" +
    "\000\016\002\ufffe\005\ufffe\011\ufffe\013\ufffe\014\ufffe\020" +
    "\ufffe\001\002\000\004\002\001\001\002\000\016\002\ufffb" +
    "\005\ufffb\011\ufffb\013\ufffb\014\ufffb\020\ufffb\001\002\000" +
    "\026\004\uffe7\005\uffe7\006\uffe7\007\uffe7\010\uffe7\012\uffe7" +
    "\016\uffe7\022\uffe7\023\uffe7\024\uffe7\001\002\000\016\002" +
    "\ufffc\005\ufffc\011\ufffc\013\ufffc\014\ufffc\020\ufffc\001\002" +
    "\000\012\005\023\011\013\013\021\014\010\001\002\000" +
    "\012\005\023\011\013\013\021\014\010\001\002\000\024" +
    "\004\uffee\005\uffee\006\044\007\043\012\uffee\016\uffee\022" +
    "\uffee\023\uffee\024\uffee\001\002\000\012\005\023\011\013" +
    "\013\021\014\010\001\002\000\012\005\023\011\013\013" +
    "\021\014\010\001\002\000\026\004\uffec\005\uffec\006\uffec" +
    "\007\uffec\010\030\012\uffec\016\uffec\022\uffec\023\uffec\024" +
    "\uffec\001\002\000\026\004\uffeb\005\uffeb\006\uffeb\007\uffeb" +
    "\010\030\012\uffeb\016\uffeb\022\uffeb\023\uffeb\024\uffeb\001" +
    "\002\000\024\004\uffef\005\uffef\006\044\007\043\012\uffef" +
    "\016\uffef\022\uffef\023\uffef\024\uffef\001\002\000\012\005" +
    "\023\011\013\013\021\014\010\001\002\000\004\017\055" +
    "\001\002\000\004\014\010\001\002\000\004\017\055\001" +
    "\002\000\004\025\ufff7\001\002\000\012\005\023\011\013" +
    "\013\021\014\010\001\002\000\014\005\023\011\013\013" +
    "\021\014\010\020\057\001\002\000\006\023\uffff\025\uffff" +
    "\001\002\000\004\025\ufff2\001\002\000\006\023\ufff5\025" +
    "\ufff5\001\002\000\016\004\040\005\041\016\ufff1\022\ufff1" +
    "\023\ufff1\024\ufff1\001\002\000\004\015\064\001\002\000" +
    "\006\013\021\025\ufff4\001\002\000\004\025\ufff3\001\002" +
    "\000\010\004\040\005\041\012\067\001\002\000\026\004" +
    "\uffe3\005\uffe3\006\uffe3\007\uffe3\010\uffe3\012\uffe3\016\uffe3" +
    "\022\uffe3\023\uffe3\024\uffe3\001\002\000\004\023\072\001" +
    "\002\000\016\002\ufff9\005\ufff9\011\ufff9\013\ufff9\014\ufff9" +
    "\020\ufff9\001\002\000\004\017\055\001\002\000\004\025" +
    "\ufff6\001\002\000\016\002\ufffa\005\ufffa\011\ufffa\013\ufffa" +
    "\014\ufffa\020\ufffa\001\002\000\016\002\ufff8\005\ufff8\011" +
    "\ufff8\013\ufff8\014\ufff8\020\ufff8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\073\000\042\002\024\004\025\005\006\006\005\007" +
    "\003\010\011\011\017\012\023\013\014\014\016\015\004" +
    "\016\026\017\021\020\010\021\015\022\013\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\014\065\015\004\016\026\017\021\020\010" +
    "\021\015\022\030\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\017\035\020" +
    "\010\021\015\022\030\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\005\032\006\005\007\003\010\011\011" +
    "\017\012\023\013\014\014\016\015\004\016\026\017\021" +
    "\020\010\021\015\022\013\001\001\000\002\001\001\000" +
    "\012\017\031\020\010\021\015\022\030\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\015\046\016\026\017\021\020\010\021\015\022" +
    "\030\001\001\000\016\015\041\016\026\017\021\020\010" +
    "\021\015\022\030\001\001\000\002\001\001\000\014\016" +
    "\045\017\021\020\010\021\015\022\030\001\001\000\014" +
    "\016\044\017\021\020\010\021\015\022\030\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\014\061\015\004\016\026\017\021\020\010\021\015\022" +
    "\030\001\001\000\004\003\060\001\001\000\004\022\057" +
    "\001\001\000\004\003\053\001\001\000\002\001\001\000" +
    "\040\004\055\005\006\006\005\007\003\010\011\011\017" +
    "\012\023\013\014\014\016\015\004\016\026\017\021\020" +
    "\010\021\015\022\013\001\001\000\036\005\032\006\005" +
    "\007\003\010\011\011\017\012\023\013\014\014\016\015" +
    "\004\016\026\017\021\020\010\021\015\022\013\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\021\064\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\003\072\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ID ::= IDENTIFIER 
            {
              IDNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token l = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IDNode(new IdentifierNode(l)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ID",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // NUM ::= NUMBER 
            {
              NUMNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token l = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NUMNode(new NumberNode(l)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NUM",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // PTERM ::= LPAREN ASTERM RPAREN 
            {
              PTERMNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token l = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTERMNode m = (ASTERMNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token r = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new PTERMNode(new LParenNode(l), m, new RParenNode(r)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PTERM",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // FACTOR ::= ID 
            {
              FACTORNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		IDNode l = (IDNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new FACTORNode(l); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FACTOR",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // FACTOR ::= NUM 
            {
              FACTORNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NUMNode l = (NUMNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new FACTORNode(l); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FACTOR",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // FACTOR ::= PTERM 
            {
              FACTORNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		PTERMNode l = (PTERMNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new FACTORNode(l); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FACTOR",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // FACTOR ::= MINUS FACTOR 
            {
              FACTORNode RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token m = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FACTORNode r = (FACTORNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new FACTORNode(new MinusNode(m), r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FACTOR",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // TERM ::= FACTOR 
            {
              TERMNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FACTORNode l = (FACTORNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TERMNode(l); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERM",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // TERM ::= TERM EXP FACTOR 
            {
              TERMNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TERMNode l = (TERMNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token m = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FACTORNode r = (FACTORNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TERMNode( l, new ExponentNode(m), r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERM",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // MDTERM ::= TERM 
            {
              MDTERMNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TERMNode l = (TERMNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new MDTERMNode(l); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MDTERM",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // MDTERM ::= MDTERM DIVIDE TERM 
            {
              MDTERMNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		MDTERMNode l = (MDTERMNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token m = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TERMNode r = (TERMNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new MDTERMNode(l, new DivideNode(m), r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MDTERM",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // MDTERM ::= MDTERM MULTIPLY TERM 
            {
              MDTERMNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		MDTERMNode l = (MDTERMNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token m = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TERMNode r = (TERMNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new MDTERMNode(l, new MultiplyNode(m), r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MDTERM",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ASTERM ::= MDTERM 
            {
              ASTERMNode RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		MDTERMNode m = (MDTERMNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ASTERMNode(m); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASTERM",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ASTERM ::= ASTERM MINUS MDTERM 
            {
              ASTERMNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTERMNode l = (ASTERMNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token m = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		MDTERMNode r = (MDTERMNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ASTERMNode(l, new MinusNode(m),  r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASTERM",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ASTERM ::= ASTERM PLUS MDTERM 
            {
              ASTERMNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTERMNode l = (ASTERMNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token m = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		MDTERMNode r = (MDTERMNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ASTERMNode(l, new PlusNode(m), r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASTERM",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // EXPR ::= ASTERM 
            {
              EXPRNode RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTERMNode m = (ASTERMNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new EXPRNode(m); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPR",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // EXPR ::= EXPR LOGICALOP ASTERM 
            {
              EXPRNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		EXPRNode l = (EXPRNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token m = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTERMNode r = (ASTERMNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new EXPRNode(l, new LogicalOpNode(m), r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPR",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ASSIGN ::= EXPR ASSIGNOP ID 
            {
              ASSIGNNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		EXPRNode l = (EXPRNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token m = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		IDNode r = (IDNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ASSIGNNode(l, new AssignOpNode(m), r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASSIGN",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DECL ::= ID DECLOP TYPE NUM 
            {
              DECLNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		IDNode l = (IDNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token m = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token r = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NUMNode rr = (NUMNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new DECLNode(l, new DeclOpNode(m), new TypeNode(r), rr); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DECL ::= ID DECLOP TYPE 
            {
              DECLNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		IDNode l = (IDNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token m = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token r = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new DECLNode(l, new DeclOpNode(m), new TypeNode(r)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // IF ::= EXPR IFOP STMTBLOCK 
            {
              IFNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		EXPRNode l = (EXPRNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token m = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		STMTBLOCKNode r = (STMTBLOCKNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IFNode(l, new IfOpNode(m), r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // IFELSE ::= IF IFOP IFOP STMTBLOCK 
            {
              IFELSENode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		IFNode l = (IFNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token m = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token r = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		STMTBLOCKNode rr = (STMTBLOCKNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IFELSENode(l, new IfOpNode(m), new IfOpNode(r), rr); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IFELSE",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // WHILE ::= EXPR WHILEOP STMTBLOCK 
            {
              WHILENode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		EXPRNode l = (EXPRNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token m = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		STMTBLOCKNode r = (STMTBLOCKNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new WHILENode(l, new WhileOpNode(m), r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WHILE",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // STMT ::= IFELSE ENDSTMT 
            {
              STMTNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		IFELSENode l = (IFELSENode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token m = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new STMTNode(l, new EndStmtNode(m)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STMT",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // STMT ::= IF ENDSTMT 
            {
              STMTNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		IFNode l = (IFNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token m = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new STMTNode(l, new EndStmtNode(m)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STMT",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // STMT ::= WHILE ENDSTMT 
            {
              STMTNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		WHILENode l = (WHILENode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token m = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new STMTNode(l, new EndStmtNode(m)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STMT",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // STMT ::= ASSIGN ENDSTMT 
            {
              STMTNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASSIGNNode l = (ASSIGNNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token m = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new STMTNode(l, new EndStmtNode(m)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STMT",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // STMT ::= DECL ENDSTMT 
            {
              STMTNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		DECLNode l = (DECLNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token m = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new STMTNode(l, new EndStmtNode(m)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STMT",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // STMTLIST ::= STMT 
            {
              STMTLISTNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		STMTNode l = (STMTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new STMTLISTNode(l); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STMTLIST",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // STMTLIST ::= STMTLIST STMT 
            {
              STMTLISTNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		STMTLISTNode l = (STMTLISTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		STMTNode m = (STMTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new STMTLISTNode(l, m); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STMTLIST",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // STMTBLOCK ::= BLOCKOPEN STMTLIST BLOCKCLOSE 
            {
              STMTBLOCKNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token l = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		STMTLISTNode m = (STMTLISTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token r = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new STMTBLOCKNode(new BlockOpenNode(l), m, new BlockCloseNode(r)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STMTBLOCK",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // START ::= STMTLIST 
            {
              STARTNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		STMTLISTNode l = (STMTLISTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new STARTNode(l); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= START EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		STARTNode start_val = (STARTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

